// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(cuid())
  userPhone  Int      @unique
  name       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userOrders Order[]
  carts      Cart[]
}

model Employee {
  id         String   @id @default(cuid())
  emplPhone  Int      @unique
  name       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  emplOrders Order[]
  carts      Cart[]
}

model Order {
  id           String         @id @default(cuid())
  title        String
  totalPaid    Int
  orderAmount  Int
  orderDate    DateTime       @default(now())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  User         User?          @relation(fields: [userId], references: [id])
  userId       String?
  Employee     Employee?      @relation(fields: [employeeId], references: [id])
  employeeId   String?
  orderDetails OrderDetails[]
  payments     Payment[]
}

model Payment {
  id String @id @default(cuid())

  totalPaid  Int
  amountPaid Int
  datePaid   DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
}

model OrderDetails {
  id          String   @id @default(cuid())
  title       String
  totalPaid   Int
  orderAmount Int
  orderDate   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Order       Order?   @relation(fields: [orderId], references: [id])
  orderId     String?
  Product     Product? @relation(fields: [productId], references: [id])
  productId   String?

  @@unique([productId, orderId])
}

model Cart {
  id          String    @id @default(cuid())
  title       String
  totalPaid   Int
  orderAmount Int
  orderDate   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Product?  @relation(fields: [productId], references: [id])
  productId   String?
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?
  Employee    Employee? @relation(fields: [employeeId], references: [id])
  employeeId  String?

  @@unique([productId, employeeId, userId])
}

model Product {
  id           String   @id @default(cuid())
  name         String
  costPrice    Float
  sellingPrice Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  category     String
  title        String
  description  String

  orderDetails OrderDetails[]
  Cart         Cart[]
}
